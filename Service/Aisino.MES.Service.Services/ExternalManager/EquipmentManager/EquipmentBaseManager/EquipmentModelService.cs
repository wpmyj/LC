///////////////////////////////////////////////////////////
//  EquipmentModelService.cs
//  Implementation of the Class EquipmentModelService
//  Generated by Enterprise Architect
//  Created on:      30-十二月-2014 13:53:22
//  Original author: chicky
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

using Aisino.MES.Service.Contracts.EquipmentManager.EquipmentBaseManager;
using Aisino.MES.Model.Entities;
using Aisino.MES.DAL.Interfaces;
using System.ServiceModel;
using Aisino.MES.Model;
using Aisino.MES.DAL.UnitOfWork;
using Aisino.MES.DAL.Repository.Repositories;
using Aisino.MES.DAL.Enums;
using System.Linq;
using Aisino.MES.Model.Business.EquipmentModel.EquipmentBaseModel;
namespace Aisino.MES.Service.Services.EquipmentManager.EquipmentBaseManager
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    /// <summary>
    /// 设备信息管理服务
    /// </summary>
    public class EquipmentModelService : IEquipmentModelService
    {

        public UnitOfWork _unitOfWork;
        public EquipmentModelService(UnitOfWork unitOfWork)
        {
            this._unitOfWork = unitOfWork;
        }

        ~EquipmentModelService()
        {

        }
        #region 公有方法
        /// <summary>
        /// 添加设备信息
        /// </summary>
        /// <param name="newEquipment">需要添加的设备信息</param>
        public EquipmentEditModel Add(EquipmentEditModel newEquipment)
        {
            try
            {
                if (CheckCodeExists(newEquipment.EditEquipment.EquipmentCode))
                {
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("添加失败"), "该编号已存在，不能重复添加");
                }
                if (CheckNameExists(newEquipment.EditEquipment.Name))
                {
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("添加失败"), "该名称已存在，不能重复添加");
                }
                _unitOfWork.AddAction(newEquipment.EditEquipment, DataActions.Add);
                _unitOfWork.Save();
                return newEquipment;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 删除设备信息
        /// </summary>
        /// <param name="deleteEquipment">需要删除的设备信息</param>
        public bool Delete(EquipmentEditModel deleteEquipment)
        {
            bool res = true;
            try
            {
                Repository<Equipment> equipMentDal = _unitOfWork.GetRepository<Equipment>();
                if (equipMentDal != null)
                {
                    this.DeleteByCode(deleteEquipment.EditEquipment.EquipmentCode);
                }
                else
                {
                    res = false;
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("删除失败"), "不存在");
                }
                return res;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 根据编号删除设备信息
        /// </summary>
        /// <param name="deleteEquipmentCode">需要删除的设备信息编号</param>
        public bool DeleteByCode(string deleteEquipmentCode)
        {
            bool res = true;
            try
            {
                Repository<Equipment> equipMentDal = _unitOfWork.GetRepository<Equipment>();
                Equipment equipMent = equipMentDal.GetObjectByKey(deleteEquipmentCode).Entity;
                if (equipMent != null)
                {
                    EquipmentEditModel equipmentEditModel = new EquipmentEditModel();
                    equipmentEditModel.EditEquipment = equipMent;
                    _unitOfWork.AddAction(equipmentEditModel.EditEquipment, DataActions.Delete);
                    _unitOfWork.Save();
                }
                else
                {
                    res = false;
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("删除失败"), "不存在");
                }
                return res;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 根据设备类型编号查找所属设备信息
        /// </summary>
        /// <param name="equipmentTypeCode">设备类型编号</param>
        public IList<EquipmentDisplayModel> FindEquipmentByTypeCode(string equipmentTypeCode)
        {
            try
            {
                Repository<Equipment> equipMentDal = _unitOfWork.GetRepository<Equipment>();
                IEnumerable<Equipment> equipMentEnum = equipMentDal.Find(c => c.EquipmentTypeCode == equipmentTypeCode).Entities;
                if (equipMentEnum != null)
                {
                    return BuildModels(equipMentEnum.ToList());
                }
                return null;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 根据编号查找设备信息
        /// </summary>
        /// <param name="code">设备编号</param>
        public EquipmentEditModel GetEquipmentByCode(string code)
        {

            try
            {
                Repository<Equipment> equipMentDal = _unitOfWork.GetRepository<Equipment>();
                Equipment equipMent = equipMentDal.Single(c => c.EquipmentCode == code).Entity;
                EquipmentEditModel equipmentEditModel = new EquipmentEditModel();
                if (equipMent != null)
                {
                    equipmentEditModel.EditEquipment = equipMent;
                }
                return equipmentEditModel;

            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 更新设备信息
        /// </summary>
        /// <param name="newEquipment">需要更新的设备信息</param>
        public EquipmentEditModel Update(EquipmentEditModel newEquipment)
        {

            try
            {
                Repository<Equipment> equipMentDal = _unitOfWork.GetRepository<Equipment>();
                Equipment equipMent = equipMentDal.GetObjectByKey(newEquipment.EditEquipment.EquipmentCode).Entity;
                if (equipMent != null)
                {
                    equipMent.EquipmentCode = newEquipment.EditEquipment.EquipmentCode;
                    equipMent.EquipmentTypeCode = newEquipment.EditEquipment.EquipmentTypeCode;
                    equipMent.Name = newEquipment.EditEquipment.Name;
                    equipMent.EquipmentModel = newEquipment.EditEquipment.EquipmentModel;
                    equipMent.EquipmentSpec = newEquipment.EditEquipment.EquipmentSpec;
                    equipMent.Remark = newEquipment.EditEquipment.Remark;
                    equipMent.WorkTimeRate = newEquipment.EditEquipment.WorkTimeRate;
                    equipMent.WorkTimeMaintain = newEquipment.EditEquipment.WorkTimeMaintain;
                    equipMent.WorkTimeSingle = newEquipment.EditEquipment.WorkTimeSingle;
                    equipMent.WorkTimeTotal = newEquipment.EditEquipment.WorkTimeTotal;
                    equipMent.Status = newEquipment.EditEquipment.Status;
                    _unitOfWork.AddAction(equipMent, DataActions.Update);
                    _unitOfWork.Save();
                }
                return newEquipment;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }
        #endregion

        #region 私有方法
        /// <summary>
        /// 将设备实体对象转换成业务显示对象
        /// </summary>
        /// <param name="equipment">需要转换的设备实体</param>
        private EquipmentDisplayModel BuildModel(Equipment equipment)
        {
            try
            {
                if (equipment == null)
                {
                    return null;
                }
                else
                {
                    EquipmentDisplayModel equipmentDisplayModel = new EquipmentDisplayModel();
                    equipmentDisplayModel.Code = equipment.EquipmentCode;
                    equipmentDisplayModel.Model = equipment.EquipmentModel;
                    equipmentDisplayModel.Name = equipment.Name;
                    equipmentDisplayModel.Specifications = equipment.EquipmentSpec;
                    switch (equipment.Status)
                    {
                        case EquipmentStatus.正常: equipmentDisplayModel.Status = "正常";
                            break;
                        case EquipmentStatus.保养: equipmentDisplayModel.Status = "保养";
                            break;
                        case EquipmentStatus.检修: equipmentDisplayModel.Status = "检修";
                            break;
                        case EquipmentStatus.大修: equipmentDisplayModel.Status = "大修";
                            break;
                        case EquipmentStatus.报废: equipmentDisplayModel.Status = "报废";
                            break;
                        default:
                            break;
                    }
                    return equipmentDisplayModel;
                }
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 将多个实体对象转换成业务对象
        /// </summary>
        /// <param name="equipments">需要转换的多个设备信息实体</param>
        private List<EquipmentDisplayModel> BuildModels(List<Equipment> equipments)
        {
            try
            {
                if (equipments == null || equipments.Count == 0)
                {
                    return null;
                }
                List<EquipmentDisplayModel> equipmentDisplayModelList = new List<EquipmentDisplayModel>();
                foreach (var itemEquipment in equipments)
                {
                    equipmentDisplayModelList.Add(this.BuildModel(itemEquipment));
                }
                return equipmentDisplayModelList;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 判断设备编号是否已存在
        /// </summary>
        /// <param name="code">设备编号</param>
        private bool CheckCodeExists(string code)
        {

            try
            {
                Repository<Equipment> equipMentDal = _unitOfWork.GetRepository<Equipment>();
                var equipMent = equipMentDal.GetObjectByKey(code);
                if (equipMent.HasValue)
                {
                    return true;
                }
                return false;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 判断设备名称是否已存在
        /// </summary>
        /// <param name="name">设备名称</param>
        private bool CheckNameExists(string name)
        {

            try
            {
                Repository<Equipment> equipMentDal = _unitOfWork.GetRepository<Equipment>();
                var equipMent = equipMentDal.Single(n => n.Name == name);
                if (equipMent.HasValue)
                {
                    return true;
                }
                return false;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }
        #endregion

    }//end EquipmentModelService

}//end namespace EquipmentBaseManager