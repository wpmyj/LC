///////////////////////////////////////////////////////////
//  EquipmentTypeModelService.cs
//  Implementation of the Class EquipmentTypeModelService
//  Generated by Enterprise Architect
//  Created on:      30-十二月-2014 13:57:23
//  Original author: chicky
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Aisino.MES.Model.Business.EquipmentModel.EquipmentBaseModel;
using Aisino.MES.Service.Contracts.EquipmentManager.EquipmentBaseManager;
using Aisino.MES.Model.Entities;
using System.ServiceModel;
using Aisino.MES.DAL.UnitOfWork;
using Aisino.MES.DAL.Repository.Repositories;
using Aisino.MES.DAL.Interfaces;
using Aisino.MES.Model;
using Aisino.MES.DAL.Enums;
using System.Linq;
namespace Aisino.MES.Service.Services.EquipmentManager.EquipmentBaseManager
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    /// <summary>
    /// 设备类型服务
    /// </summary>
    public class EquipmentTypeModelService : IEquipmentTypeModelService
    {
        public UnitOfWork _unitOfWork;
        public EquipmentTypeModelService(UnitOfWork unitOfWork)
        {
            this._unitOfWork = unitOfWork;
        }

        ~EquipmentTypeModelService()
        {

        }

        /// <summary>
        /// 添加设备类型
        /// </summary>
        /// <param name="newEquipmentType">需要添加的设备类型</param>
        public EquipmentTypeEditModel Add(EquipmentTypeEditModel newEquipmentType)
        {
            try
            {
                if (CheckCodeExists(newEquipmentType.EditEquipmentType.EquipmentTypeCode))
                {
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("添加失败"), "该编号已存在，不能重复添加");
                }
                if (CheckNameExists(newEquipmentType.EditEquipmentType.Name))
                {
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("添加失败"), "该名称已存在，不能重复添加");
                }
                _unitOfWork.AddAction(newEquipmentType.EditEquipmentType, DataActions.Add);
                _unitOfWork.Save();
                return newEquipmentType;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 将数据实体对象转换成业务对象
        /// </summary>
        /// <param name="equipmentType">需要转换的设备类型</param>
        private EquipmentTypeDisplayModel BuildModel(EquipmentType equipmentType)
        {
            try
            {
                if (equipmentType == null)
                {
                    return null;
                }
                EquipmentTypeDisplayModel equipmentTypeDisplayModel = new EquipmentTypeDisplayModel();
                equipmentTypeDisplayModel.Name = equipmentType.Name;
                equipmentTypeDisplayModel.Stopped = equipmentType.Stopped;
                equipmentTypeDisplayModel.TypeCode = equipmentType.EquipmentTypeCode;
                return equipmentTypeDisplayModel;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 将多个实体对象转换成业务显示对象
        /// </summary>
        /// <param name="equipmentTypes">需要转换的多个设备类型实体</param>
        private List<EquipmentTypeDisplayModel> BuildModels(List<EquipmentType> equipmentTypes)
        {
            try
            {
                if (equipmentTypes == null || equipmentTypes.Count == 0)
                {
                    return null;
                }
                List<EquipmentTypeDisplayModel> equipmentTypeDisplayModelList = new List<EquipmentTypeDisplayModel>();
                foreach (var equipmentType in equipmentTypes)
                {
                    EquipmentTypeDisplayModel equipmentTypeDisplayModel = new EquipmentTypeDisplayModel();
                    equipmentTypeDisplayModel.Name = equipmentType.Name;
                    equipmentTypeDisplayModel.Stopped = equipmentType.Stopped;
                    equipmentTypeDisplayModel.TypeCode = equipmentType.EquipmentTypeCode;
                    equipmentTypeDisplayModelList.Add(equipmentTypeDisplayModel);
                }
                return equipmentTypeDisplayModelList;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 确认设备类型编号是否已存在
        /// </summary>
        /// <param name="code">设备类型编号</param>
        private bool CheckCodeExists(string code)
        {
            try
            {
                Repository<EquipmentType> equipmentTypeDal = _unitOfWork.GetRepository<EquipmentType>();
                var equipmentType = equipmentTypeDal.GetObjectByKey(code);
                if (equipmentType.HasValue)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 确认设备类型名称是否存在
        /// </summary>
        /// <param name="name">设备类型名称</param>
        private bool CheckNameExists(string name)
        {
            try
            {
                Repository<EquipmentType> equipmentTypeDal = _unitOfWork.GetRepository<EquipmentType>();
                var equipmentType = equipmentTypeDal.Single(n => n.Name == name);
                if (equipmentType.HasValue)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 删除设备类型
        /// </summary>
        /// <param name="deleteEquipmentType">需要删除的设备类型信息</param>
        public bool Delete(EquipmentTypeEditModel deleteEquipmentType)
        {
            bool res = true;
            try
            {
                Repository<EquipmentType> equipmentTypeDal = _unitOfWork.GetRepository<EquipmentType>();
                EquipmentType equipmentType = equipmentTypeDal.GetObjectByKey(deleteEquipmentType.EditEquipmentType.EquipmentTypeCode).Entity;
                if (equipmentType != null)
                {
                    this.DeleteByCode(deleteEquipmentType.EditEquipmentType.EquipmentTypeCode);
                }
                else
                {
                    res = false;
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("删除失败"), "该编号不存在，不能删除");
                }
                return res;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 根据设备类型编号删除设备类型
        /// </summary>
        /// <param name="deleteEquipmentTypeCode">需要删除的设备类型编号</param>
        public bool DeleteByCode(string deleteEquipmentTypeCode)
        {
            bool res = true;
            try
            {
                Repository<EquipmentType> equipmentTypeDal = _unitOfWork.GetRepository<EquipmentType>();
                EquipmentType equipmentType = equipmentTypeDal.GetObjectByKey(deleteEquipmentTypeCode).Entity;
                EquipmentTypeEditModel equipmentTypeEditModel = new EquipmentTypeEditModel();
                if (equipmentType != null)
                {
                    equipmentTypeEditModel.EditEquipmentType = equipmentType;
                    if (equipmentTypeEditModel.HasSubEquipments())
                    {
                        res = false;
                        throw new FaultException<AisinoMesFault>(new AisinoMesFault("删除失败"), "该设备存在子设备，不能删除");
                    }
                    _unitOfWork.AddAction(equipmentTypeEditModel.EditEquipmentType, DataActions.Delete);
                    _unitOfWork.Save();
                }
                else
                {
                    res = false;
                    throw new FaultException<AisinoMesFault>(new AisinoMesFault("删除失败"), "该编号不存在，不能删除");
                }
                return res;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 获取所有设备类型信息显示业务模型
        /// </summary>
        public IList<EquipmentTypeDisplayModel> GetAll()
        {
            try
            {
                Repository<EquipmentType> equipmentTypeDal = _unitOfWork.GetRepository<EquipmentType>();
                IEnumerable<EquipmentType> EquipmentTypeEnum = equipmentTypeDal.GetAll().Entities;
                if (EquipmentTypeEnum != null)
                {
                    return this.BuildModels(EquipmentTypeEnum.ToList());
                }
                return null;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 根据设备类型编号获取设备类型编辑对象
        /// </summary>
        /// <param name="code">设备类型编号</param>
        public EquipmentTypeEditModel GetEquipmentTypeByCode(string code)
        {
            try
            {
                Repository<EquipmentType> equipmentTypeDal = _unitOfWork.GetRepository<EquipmentType>();
                EquipmentType equipmentType = equipmentTypeDal.GetObjectByKey(code).Entity;
                EquipmentTypeEditModel equipmentTypeEditModel = new EquipmentTypeEditModel();
                if (equipmentType != null)
                {
                    equipmentTypeEditModel.EditEquipmentType = equipmentType;
                }
                return equipmentTypeEditModel;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

        /// <summary>
        /// 更新设备类型
        /// </summary>
        /// <param name="newEquipmentType">需要修改的设备类型</param>
        public EquipmentTypeEditModel Update(EquipmentTypeEditModel newEquipmentType)
        {
            try
            {
                Repository<EquipmentType> equipmentTypeDal = _unitOfWork.GetRepository<EquipmentType>();
                EquipmentType equipmentType = equipmentTypeDal.GetObjectByKey(newEquipmentType.EditEquipmentType.EquipmentTypeCode).Entity;
                EquipmentTypeEditModel equipmentTypeEditModel = new EquipmentTypeEditModel();
                if (equipmentType != null)
                {
                    equipmentType.EquipmentTypeCode = newEquipmentType.EditEquipmentType.EquipmentTypeCode;
                    equipmentType.Name = newEquipmentType.EditEquipmentType.Name;
                    equipmentType.Remark = newEquipmentType.EditEquipmentType.Remark;
                    equipmentType.IsWeight = newEquipmentType.EditEquipmentType.IsWeight;
                    equipmentType.Stopped = newEquipmentType.EditEquipmentType.Stopped;
                }
                _unitOfWork.AddAction(equipmentType, DataActions.Update);
                _unitOfWork.Save();
                return newEquipmentType;
            }
            catch (RepositoryException rex)
            {
                string msg = rex.Message;
                string reason = rex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                string reason = ex.StackTrace;
                throw new FaultException<AisinoMesFault>
                (new AisinoMesFault(msg), reason);
            }
        }

    }//end EquipmentTypeModelService

}//end namespace EquipmentBaseManager